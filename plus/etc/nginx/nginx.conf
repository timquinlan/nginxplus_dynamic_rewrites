user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log info;
pid        /var/run/nginx.pid;

# Load Modules
load_module /usr/lib/nginx/modules/ngx_http_js_module.so; # NGINX Javascript


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$request_id"';

    # NGINX Plus Additional NGINX Metrics
    log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$http2" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$host" sn="$server_name" '
                      'rt=$request_time '
                      'ua="$upstream_addr" us="$upstream_status" '
                      'ut="$upstream_response_time" ul="$upstream_response_length" '
                      'cs=$upstream_cache_status $request_id' ;

    # access_log  /var/log/nginx/access.log  main; # Default
    access_log  /var/log/nginx/access.log  main_ext; # NGINX Plus Additional NGINX Metrics

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;
    resolver 127.0.0.11 ipv6=off; # Docker DNS

keyval_zone zone=rewrites:1m;
keyval $uri $newuri zone=rewrites;

upstream local_upstream {
        server localhost:88;
    }

server {
    listen 88;
    location / {
        return 200 "content handled by proxy_pass\n";
    }
}

server {
    listen 80;
    server_name localhost;

    if ($newuri) {
       #return 301 http://www.example.com$newuri/;
       rewrite ^(.*)$ $newuri last;
    }
    
    location / {
        proxy_pass http://local_upstream;
    }

    location /rewritten {
        return 200 "this is the rewritten location\n";
    }
    
    location /api {
        # don't use this in prod without adding some security!!!
        api write=on;
    }

    location = /dashboard.html {
        root /usr/share/nginx/html;
    }
}

keyval_zone zone=timebounds:1m;
keyval $uri $epochtimeout zone=timebounds;

server {
    listen 81;

    js_import /etc/nginx/njs/dyn_rewrite.js;
    js_set $evaluate_rewrite dyn_rewrite.dyn_rewrite;

    if ($evaluate_rewrite = 1) {
       #return 301 http://www.example.com$newuri/;
       rewrite ^(.*)$ $newuri last;
    }
    
    if ($evaluate_rewrite = 2) {
       rewrite ^(.*)$ /expired last;
    }
    
    location / {
        proxy_pass http://local_upstream;
    }

    location /rewritten {
        return 200 "this is the rewritten location\n";
    }
    
    location /expired {
        return 200 "that redirect is expired\n";
    }
    
    location /api {
        # don't use this in prod without adding some security!!!
        api write=on;
    }

    location = /dashboard.html {
        root /usr/share/nginx/html;
    }
}


keyval_zone zone=csv_data:1m;
keyval $uri $csv_data zone=csv_data;

server {
    listen 82;
    
    js_import /etc/nginx/njs/csv_rewrite.js;
    js_set $evaluate_rewrite csv_rewrite.csv_rewrite;
    js_set $uri_from_csv csv_rewrite.set_uri;

    if ($evaluate_rewrite = 1) {
       #return 301 http://www.example.com$newuri/;
       rewrite ^(.*)$ $uri_from_csv last;
    }
    
    if ($evaluate_rewrite = 2) {
       rewrite ^(.*)$ /expired last;
    }
    
    location / {
        proxy_pass http://local_upstream;
    }

    location /rewritten {
        return 200 "this is the rewritten location\n";
    }
    
    location /expired {
        return 200 "that redirect is expired\n";
    }
    
    location /api {
        # don't use this in prod without adding some security!!!
        api write=on;
    }

    location = /dashboard.html {
        root /usr/share/nginx/html;
    }
}

}
